#+title: WIPWIPWIPWIPWIP

** First
go to hlissners' dotfiles, scroll to bottom and read / watch all the sources

Get some help with 'configuration.nix(5)' man page and in the NixOS manual
(accessible by running ‘nixos-help’).

** Flakes
Any subsequent build of this flake will use the version of nixpkgs recorded in
the lock file. If you add new inputs to flake.nix, when you run any command such
as nix build, Nix will automatically add corresponding locks to flake.lock.
However, it won’t replace existing locks. If you want to update a locked input
to the latest version, you need to ask for it:

: $ nix flake lock --update-input nixpkgs
: $ nix build

https://www.tweag.io/blog/2020-07-31-nixos-flakes - nix flakes, templates,
updating lock files etc..


*** Nix CLI - Flakes Usage
Source: https://github.com/colemickens/nixos-flake-example#nix-cli---flakes-usage

Nix is in flakes mode when:

 ~--flake~ is used with the ~nixos-rebuild~ command or, when nix build is used with
 an argument like ~.#something~ (the hash symbol separates the flake source from
 the attribute to build)

When in this mode:

 Nix flake commands will implicitly take a directory path, it expects a
 ~flake.nix~ inside when you see: ~nix build '.#something'~, the '.' means current
 directory, and ~#something~ means to build the ~something~ output attribute

*** Useful commands and examples

~nixos-rebuild build --flake '.#'~ :
- looks for flake.nix in . (current dir)
- since it's nixos-rebuild, it automatically tries to build:
  - #nixosConfigurations.{hostname}.config.system.build.toplevel

: nixos-rebuild build --flake '/code/nixos-config#mysystem'

** Subject to change for 4k laptop

#+begin_src nix
hardware.video.hidpi.enable = true;
#+end_src

** things removed from original configuration.nix

#+begin_src nix
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # Copy the NixOS configuration file and link it from the resulting system
  # (/run/current-system/configuration.nix). This is useful in case you
  # accidentally delete configuration.nix.
  # system.copySystemConfiguration = true;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).

#+end_src

** Notes
Setup with dual monitors, making one primary, arranging those can be looked up
in hlissners' dots in 'murasaki' host.

Server setup can be looked up in 'ao' host also there.

Allow to do things without sudo: https://github.com/jollheef/localhost/blob/master/security.nix#L42

Secrets file example: https://github.com/jollheef/localhost/blob/master/secrets.nix.example

How to write systemd units:
- https://github.com/jollheef/localhost/blob/master/suspend.nix
- Autoupdate units: https://github.com/jollheef/localhost/blob/master/auto-update.nix

Will b useful when ima flash different android image:
#+begin_src nix
programs.adb.enable = true;
users.users.${var.user.name}.extraGroups = [ "adbusers" ];
nixpkgs.config.android_sdk.accept_license = true;
#+end_src

[[https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/impl/neko/program/kitty/default.nix][Example]] of kitty setup.

[[https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/impl/neko/program/neovim/default.nix][Neovim setup]].

Managing secrets for multiple servers / users - [[https://github.com/ryantm/agenix][agenix]]. Setup example can b
found in hlissners' repo and on [[https://discourse.nixos.org/t/install-agenix-in-environment-systempackages-on-nixos-with-flakes/17169/2][discourse]]

*** Configs reviews
- [[github:jollheef/localhost]] - *clean*, easy to read and understand, no flakes,
  only home-manager setup

** Todo / to check

How to autoreload hyprland config on any change in flake hypr config dir?

Gaming performance:
#+begin_src nix
programs = {
    steam.enable = true;
    dconf.enable = true;

    # Better gaming performance
    # Steam: right-click game - properties - launch options: gamemoderun %command%
    # Lutris: General Preferences - enable feral gamemode
    # 			      - global options - add environment variables:
    # LD_PRELOAD=/nix/xtore/*-gamemode-*-lib/lib/libgamemodeauto.so
    # gamemode.enable = true; # XXX: any1 uses it this setting?
};
#+end_src

Xbox-controller setup [[https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/impl/lego/service/xbox-controller.nix][example]].

Add ssh keygen operation automatically:
#+begin_src bash
ssh-keygen -t ed25519 -C "418@duck.com"
# add no passphrase
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519
cat ~/.ssh/id_ed25519.pub
#+end_src

#+NAME: lexuge dots
#+begin_src nix
# Allow fonts to be discovered
fonts.fontconfig.enable = true;

niximg = self.nixosConfigurations.niximg.config.system.build.isoImage;
#+end_src

Whether to enable fwupd, a DBus service that allows applications to update
firmware (???) :
: services.fwupd.enable = true;

Nix settings:
#+begin_src nix
# Source: https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/impl/lego/misc/nix-itself.nix
nix.settings.substituters = [
    # "https://mirror.sjtu.edu.cn/nix-channels/store?priority=0"
    # "https://mirrors.tuna.tsinghua.edu.cn/nix-channels/store?priority=5"
    # "https://nixos-cn.cachix.org"
    # "https://data.cachix.org"
];
nix.settings.trusted-public-keys = [
  "nixos-cn.cachix.org-1:L0jEaL6w7kwQOPlLoCR3ADx+E3Q8SEFEcB9Jaibl0Xg="
  "data.cachix.org-1:we/1k8A3S5cx8aM9wb6ig/DWL1cidVQluhJwD8V3VXM="
];

  nix.settings.system-features =
    [ "benchmark" "big-parallel" "kvm" "nixos-test" "recursive-nix" ];
  nix.settings.experimental-features =
    [ "recursive-nix" "flakes" "nix-command" ];
  nix.settings.flake-registry = pkgs.writeText "flake-empty.json"
    (builtins.toJSON {
      flakes = [ ];
      version = 2;
    });
#+end_src

*** [ ] Setup secrets file
Example from [[https://github.com/ninlives/emerge][emerge]] repo:
- [[https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/bombe/default.nix][Defines]] it (follow along in this folder for file format) and [[https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/impl/neko/program/qute/default.nix][imports]] it in
  modules.

*** [ ] Learn 'modules/themes' dir in hlissners' dots
\+ also check [[https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/impl/lego/hardware/boot.nix][this]] boot theming file +
: boot.loader.grub.fontSize = 72;

*** [ ] Setup theme
possible home-manager options:

#+begin_src nix
# XXX: customize theme for different one / custom, and cursor as well
pointerCursor = {
  name = "Dracula-cursors";
  package = pkgs.dracula-theme;
  size = 16;
};
# NixOS uses location below for default wallpaper, so below you can source it from wherever you want
# file.".config/wall".source = ../modules/themes/wall;
#+end_src

GTK theming setup example:
#+begin_src nix
gtk = {
  enable =   true;
  theme = {
    name = "Dracula";
    package = pkgs.dracula-theme;
  };
  iconTheme = {
    name = "Papirus-Dark";
    package = pkgs.papirus-icon-theme;
  };
  font = {
    # or FiraCode Nerd Font Mono Medium
    name = "JetBrains Mono Medium";
  };
};
#+end_src

Fonts [[https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/impl/lego/ui/fonts.nix][example]].

*** [ ] Setup nix img
Shell scripts:
- https://github.com/jollheef/localhost#installation
- https://github.com/LEXUGE/nixos/blob/master/install.sh
- https://github.com/Ninlives/emerge/blob/master/def/default.nix#L28

*** [ ] /Setup CI/:

#+NAME: source: https://github.com/LEXUGE/nixos
![Build customized NixOS LiveCD ISO](https://github.com/LEXUGE/nixos/workflows/Build%20customized%20NixOS%20LiveCD%20ISO/badge.svg) ![Nix Flake Check](https://github.com/LEXUGE/nixos/workflows/Nix%20Flake%20Check/badge.svg) ![Release status](https://img.shields.io/github/v/release/LEXUGE/nixos.svg)
*** [ ] Setup easyeffects (like minihost on windows)
https://www.youtube.com/watch?v=6LbEmP1_dog

hardware -> audio module -> easyeffects app
