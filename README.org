#+title: WIPWIPWIPWIPWIP

[[https://nixos.org/manual/nix/stable/language/index.html][nix expression language]]
Home-manager [[https://nix-community.github.io/home-manager/options.html][options]] documentation.
Nixpkgs [[https://nixos.org/manual/nixpkgs/stable][lib]] documentation.

Useful: hlissners' dotfiles, scroll to bottom and read / watch all the sources.

[[https://nixos.wiki/wiki/Configuration_Collection][Configuration Collection]]

** Sources
- https://github.com/fufexan/dotfiles
- https://github.com/hlissner/dotfiles
- https://github.com/ninlives/emerge
- https://gitlab.com/chasecaleb/emacs.nix
- https://github.com/divnix/digga
- https://git.sr.ht/~dunklecat/nixos-config
- https://github.com/lexuge/nixos
- https://github.com/nobbz/nixos-config
- https://github.com/purcell/dotfiles
- https://github.com/bqv/rc
- https://github.com/viperml/dotfiles

** Flakes
If you want to update a locked input to the latest version, you need to ask for
it:

: $ nix flake lock --update-input nixpkgs
: $ nix build

https://www.tweag.io/blog/2020-07-31-nixos-flakes - nix flakes, templates,
updating lock files etc..

*** Nix CLI - Flakes Usage
Source: https://github.com/colemickens/nixos-flake-example#nix-cli---flakes-usage

Nix is in flakes mode when:

 ~--flake~ is used with the ~nixos-rebuild~ command or, when nix build is used with
 an argument like ~.#something~ (the hash symbol separates the flake source from
 the attribute to build)

When in this mode:

 Nix flake commands will implicitly take a directory path, it expects a
 ~flake.nix~ inside when you see: ~nix build '.#something'~, the '.' means current
 directory, and ~#something~ means to build the ~something~ output attribute

*** Useful commands and examples

~nixos-rebuild build --flake '.#'~ :
- looks for flake.nix in . (current dir)
- since it's nixos-rebuild, it automatically tries to build:
  - #nixosConfigurations.{hostname}.config.system.build.toplevel

: nixos-rebuild build --flake '/code/nixos-config#mysystem'

** Possible settings for 4k laptop config
#+begin_src nix
hardware.video.hidpi.enable = true;
#+end_src

** things removed from original configuration.nix
#+begin_src nix
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # Copy the NixOS configuration file and link it from the resulting system
  # (/run/current-system/configuration.nix). This is useful in case you
  # accidentally delete configuration.nix.
  # system.copySystemConfiguration = true;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. Itâ€˜s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).

#+end_src

** Notes
[[https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/impl/lego/network/switch.nix][Example]] of writing shell scripts and adding them to user commands with [
nopasswd ] option.

#+begin_src nix
# Japanese input using fcitx
i18n.inputMethod = {
  enabled = "fcitx";
  fcitx.engines = with pkgs.fcitx-engines; [mozc];
};
#+end_src

** lack of internet questions:

#+NAME: ~/learning/fufexan/hosts/io/default.nix
#+begin_src nix
# boot.plymouth.enable = true;
environment.systemPackages = [config.boot.kernelPackages.cpupower];

environment = {
  # set channels
  etc = {
    "nix/flake-channels/system".source = inputs.self;
    "nix/flake-channels/nixpkgs".source = inputs.nixpkgs;
    "nix/flake-channels/home-manager".source = inputs.hm;
  };

  # enable zsh autocompletion for system packages (systemd, etc)
  pathsToLink = ["/share/zsh"];
};

services = {
  avahi = {
    enable = true;
    nssmdns = true;
    publish.enable = true;
    publish.domain = true;
    publish.userServices = true;
  };

  openssh = {
    enable = true;
    useDns = true;
  };

  resolved.enable = true;

  tailscale.enable = true;
};

zramSwap.enable = true;
#+end_src

Is it a nix repl here? - ~/learning/fufexan/pkgs/repl/default.nix

** Todo / to check
*** Small and ez todos [0/5]
**** TODO [[https://github.com/jollheef/localhost]]
*clean*, easy to read and understand, no flakes, only home-manager setup
**** TODO setup mako

*** To setup [0/12]
**** TODO setup openvpn
**** TODO setup tdlib
**** TODO mkOutOfStoreSymlink
With hyprland, waybar and other needed configs to not rebuild flake everytime in
config change
**** TODO Gaming performance
~/learning/fufexan/modules/gamemode.nix

#+begin_src nix
programs = {
    steam.enable = true;

    # Better gaming performance
    # Steam: right-click game - properties - launch options: gamemoderun %command%
    # Lutris: General Preferences - enable feral gamemode
    # 			      - global options - add environment variables:
    # LD_PRELOAD=/nix/xtore/*-gamemode-*-lib/lib/libgamemodeauto.so
    # gamemode.enable = true; # XXX: any1 uses it this setting?
};
#+end_src
**** TODO Possible to store wifi passwords and other settings?
**** TODO Setup nix img

~/learning/fufexan/modules/iso.nix

#+NAME: lexuge dots
#+begin_src nix
niximg = self.nixosConfigurations.niximg.config.system.build.isoImage;
#+end_src

Shell scripts:
- https://github.com/jollheef/localhost#installation
- https://github.com/LEXUGE/nixos/blob/master/install.sh
- https://github.com/Ninlives/emerge/blob/master/def/default.nix#L28
- [[file:~/learning/emerge/impl/echo/image.nix][another example]]

**** TODO Setup other nix settings
#+begin_src nix
supportedFeatures = ["nixos-test" "benchmark" "kvm" "big-parallel"];

# This is just a representation of the nix default
nix.systemFeatures = [ "nixos-test" "benchmark" "big-parallel" "kvm" ];

# nix.settings.system-features =
#   [ "benchmark" "big-parallel" "kvm" "nixos-test" "recursive-nix" ];
nix.settings.experimental-features =
  [ "recursive-nix" "flakes" "nix-command" ];
nix.settings.flake-registry = pkgs.writeText "flake-empty.json"
  (builtins.toJSON {
    flakes = [ ];
    version = 2;
  });
#+end_src

**** TODO Setup theme
Learn 'modules/themes' dir in hlissners' dots \+ also check [[https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/impl/lego/hardware/boot.nix][this]] boot theming
file +
: boot.loader.grub.fontSize = 72;

possible home-manager options:

- [ ] also move some font and maybe other theme-related configs out from
  hyprland.nix file, cuz for now there are plenty of unrelated to hypr
  things in there.

#+begin_src nix
# XXX: customize theme for different one / custom, and cursor as well
pointerCursor = {
  name = "Dracula-cursors";
  package = pkgs.dracula-theme;
  size = 16;
};
# NixOS uses location below for default wallpaper, so below you can source it from wherever you want
# file.".config/wall".source = ../modules/themes/wall;
#+end_src

GTK theming setup example:
#+begin_src nix
gtk = {
  enable =   true;
  theme = {
    name = "Dracula";
    package = pkgs.dracula-theme;
  };
  iconTheme = {
    name = "Papirus-Dark";
    package = pkgs.papirus-icon-theme;
  };
  font = {
    # or FiraCode Nerd Font Mono Medium
    name = "JetBrains Mono Medium";
  };
};
#+end_src

Fonts [[https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/impl/lego/ui/fonts.nix][example]].
**** TODO After reading thorugh hlissners theme folders cleanup lib dir
**** TODO Setup easyeffects (like minihost on windows)
https://www.youtube.com/watch?v=6LbEmP1_dog

hardware -> audio module -> easyeffects app
**** TODO Try out nix-sops
[[https://samleathers.com/posts/2022-02-11-my-new-network-and-sops.html][Good article]] to start with, but find some dotfiles with example of sops usage:
- https://github.com/disassembler/network
- https://github.com/ninlives/emerge Example from [[https://github.com/ninlives/emerge][emerge]] repo: - [[https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/bombe/default.nix][Defines]] it
  (follow along in this folder for file format) and [[https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/impl/neko/program/qute/default.nix][imports]] it in modules. He's
  using it in his syncthing config.

[[https://github.com/Mic92/sops-nix][documentation]]

[[https://discourse.nixos.org/t/flakes-secret-configs/14638][Some discussion]] on how to store secrets in nixos repo and [[https://nixos.wiki/wiki/Comparison_of_secret_managing_schemes][comparison]] of them.
**** TODO Learn how to debug
.. in order to get rid of some unnecessary hlissners abstractions, especially in
nix settings in hosts/default.nix. For now it's a mess
***** TODO Learn nix and understand what i need
~/learning/calebchase/nixos-config/nixos/nix.nix - good example

*** To fix [0/5]
- [ ] fix syncthingtray service not working
- [ ] fix warframe launcher working badly
- [ ] fix 1:30 wait on every reboot / shutdown
- [ ] fix syncthingtray opening in not floating mode
- [ ] fix webcord rule not applying

*** Backlog [0/2]
# not urgent, but most likely needed setups / fixes

**** TODO Xbox-controller setup [[https://github.com/ninlives/emerge/tree/ce9e1c780019c1aa5d945545de7f25ba295b9f01/impl/lego/service/xbox-controller.nix][example]].

**** TODO /Setup CI/:

#+NAME: source: https://github.com/LEXUGE/nixos
![Build customized NixOS LiveCD ISO](https://github.com/LEXUGE/nixos/workflows/Build%20customized%20NixOS%20LiveCD%20ISO/badge.svg) ![Nix Flake Check](https://github.com/LEXUGE/nixos/workflows/Nix%20Flake%20Check/badge.svg) ![Release status](https://img.shields.io/github/v/release/LEXUGE/nixos.svg)
